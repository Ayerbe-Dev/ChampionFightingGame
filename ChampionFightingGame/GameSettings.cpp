#include "GameSettings.h"
#include <fstream>

GameSettings::GameSettings() {
	std::ifstream settings;
	settings.open("resource/save/game_settings.yml");
	if (settings.fail()) {
		std::cout << "Failed to open settings file! \n";
		settings.close();
		return;
	}
	for (int i = 0; i < SETTING_KIND_MAX; i++) {
		settings >> this->settings[i].name >> this->settings[i].val;
	}
	settings.close();
}

//These aren't member funcs because this way even though we technically use a global var, it's entirely used in this file

GameSettings g_settings;

/// <summary>
/// Check the value of a specific setting. If the user passes an invalid setting, return 0. TODO: Make this a GameManager member function.
/// </summary>
/// <param name="setting">: The setting to check.</param>
/// <returns>Value of a setting</returns>
int getGameSetting(std::string setting) {
	for (int i = 0; i < SETTING_KIND_MAX; i++) {
		if (g_settings.settings[i].name == setting) {
			return g_settings.settings[i].val;
		}
	}
	return 0;
}

/// <summary>
/// Change the setting value on the settings table to the specified value. Does NOT update the settings param file.
/// 
/// Use this function when the user has set a value (such as screen resolution), but has not confirmed their selection yet.
/// </summary>
/// <param name="setting">: The setting to change.</param>
/// <param name="val">: What to change the new value to.</param>
void setGameSetting(std::string setting, int val) {
	for (int i = 0; i < SETTING_KIND_MAX; i++) {
		if (g_settings.settings[i].name == setting) {
			g_settings.settings[i].val = val;
			return;
		}
	}
}

/// <summary>
/// Update the settings file to match our current list of settings. Use this whenever settings are confirmed.
/// </summary>
void updateGameSettings() {
// .                    ... ............ ....... ...............................
//.... ... . .   .   . ... .....................................................
//.... . . .       ..................,,***********,.............................
// ... ..  . ...................,********************/*,........................
//. .      .    .............,*////*****,*,,,,,,,******//*,.....................
// ...  .. ............... **////*/*****,*,,,,,********////*....................
// . . . .................*/////////*****,**************////*,..................
//.......................*//((////*****,,,,,,,,,,,******/////*..................
//   .  .... ...........,//(((///****,,,,,,,,,,,,*******//////*.................
// ...  . ..............*/((((////////////*/*//((###((((/*////**................
// . . ..... ...........*//(((((##%%%%%%%#((((%%%&&%#%&&%%#/////................
//.... .................*//((#%%%&&%&&&&&%#**(%&&&(%@%(%%%##///(.*/,............
// . . ... . ............*/(#(%&%(////((((*,,//(((((##((**#(///(/#%,............
// ....... ..........((((//(#((//////////(*,*///*********/((//((##(,............
// . . ...............###//((//*******////*,,*/**/(/******/((/(//(/.............
// ....... ...........((#(/((//////(###((#((((##((//#%#((//(((((//(.............
//.     ..............(/(((((((((#%#((#%&&&%%%&&&#((((####(((((((/*.............
//   . ................(((#(((((#%#%%%%%%%&&%#&#/(###&&&(((#(#..................
// ......................../(##(/(##&@&&%%%#%%/((##&%//*/(%(((..................
//..........................(###(////((((((/,,*/////**//##(##...................
//..........................*(####/(//((((((((////(/*//##(##/...................
// .........................*(((###((/(((((((((//(////(#(#(#....................
//.........................,,((#(#(#((//*//*********/(#((##(....................
//.......................,.,/(###(####(((//******///(######(....................
//.......................,,,((############(((((#####%#%##((/....................
//..................,,.,,,,,((((########%%%%%%%%%%%%%###(((*....................
//...................,,,,,,,((((((((####%####%%%%%####(((((/....................
//.................,,,,,,,*/(((((((((((##############(((((((*,..................
//..................,,,,/&&(///(((((((((###########((((((//(/%#*................
//.................,.,.,((&((////((((((((((((######((((((///(%*/(...............
//..................,,..(/(%(////((((((((((((###(((((((((((/((**(/..............
//................,,,,..*/////&/*/(((((((((((((((((((////(%#/****#*....,.. .....
//.................,,,,..*/***,*//%#(((//((((////////*#%///******//...,,.   ....
//....................,,..**********/(#&%(/(((///%%(**************,..,,..   ....
// ........,*,.... ....,...,,*****//*****/. ,/********************...,....   ...
//........,///***,.... ......*****,,*****(*(******,***********,,,...,....    ...
//.........,,,/(/**,...........,**,************,,*,*********,,,.........   .../,
//.............,,*(#######%........,,,***********,,,,,,,**,,,. .........   .#(*,
//................,,,**,,,,((,........,***********,,,,,,,,,......,....   (##(/*,

			/*Mark is watching. Mark does not approve of globals.*/


	std::ofstream settings;
	settings.open("resource/save/game_settings.yml", std::ofstream::trunc);
	if (settings.fail()) {
		std::cout << "Failed to open settings file! \n";
		settings.close();
		return;
	}
	for (int i = 0; i < SETTING_KIND_MAX; i++) {
		settings << g_settings.settings[i].name << " " << g_settings.settings[i].val << "\n";
	}
	settings.close();
}