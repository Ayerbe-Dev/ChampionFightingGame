#pragma once
using namespace std;
#include <iostream>
#include <fstream>
#include "SDL.h"
#include <sstream>
#include <SDL_ttf.h>
#include "GameCoordinate.fwd.h"
#include "GameCoordinate.h"

typedef char i8;
typedef unsigned char u8;
typedef short i16;
typedef unsigned short u16;
typedef unsigned int u32;
typedef long long i64;
typedef unsigned long long u64;

#define global_variable static
#define internal static

#define WINDOW_WIDTH 1280
#define WINDOW_HEIGHT 720

#define TICK_RATE_S 60
#define TICK_RATE_MS 1000 / TICK_RATE_S

#define HITBOX_COUNT_MAX 9

#define PARAM_TABLE_LENGTH 256
#define ANIM_TABLE_LENGTH 256
#define CSS_SLOTS 32
#define CHARAS_PER_ROW 9
#define CSS_WIDTH WINDOW_WIDTH * 0.8
#define CSS_HEIGHT WINDOW_HEIGHT / 2.5
#define MOVE_SCRIPT_MAX 256
#define MAX_PROJECTILES 10
#define MENU_STICK_HOLD_TIMER 20
#define MENU_STICK_HOLD_INTERVAL 2
#define MAX_ANIM_LENGTH 256

#define DASH_WINDOW 14
#define TECH_WINDOW 8

#define WINDOW_FACTOR WINDOW_HEIGHT / WINDOW_WIDTH
#define JUMP_FOLLOW_THRESHOLD 300
#define CAMERA_MAX_ZOOM_OUT 1000
#define CAMERA_MAX_ZOOM_IN 800
#define FONT_COUNT 2
#define BUFFER_WINDOW 3
#define MOTION_SPECIAL_TIMER 11
#define MAX_SOUNDS 20

#define FLOOR_GAMECOORD 60.0

struct SoundInfo {
	u8* data;
	u32 dpos;
	u32 dlen;
};

/*
	Locks the app to 60tps. tick and tok should be 2 Uint32s initialized to 0;
*/
void frameTimeDelay(Uint32 *tick, Uint32 *tok);
int clamp(int min, int value, int max);
float clampf(float min, float value, float max);
int ymlChopInt(string line);
float ymlChopFloat(string line);
string ymlChopString(string line);
bool is_collide(SDL_Rect RectA, SDL_Rect RectB);
SDL_Texture *loadTexture(const char *file_path);
bool is_any_controller_input(SDL_GameController* controller);
string Filter(const string& to, const string& remove);
void draw_text(string font_name, string text, GameCoordinate pos, int font_size = 24, int r = 0, int g = 0, int b = 0, int a = 255);
void draw_text(string font_name, string text, float x_pos, float y_pos, int font_size = 24, int r = 0, int g = 0, int b = 0, int a = 255);
void draw_text_multi_lines(string font_name, string text, float x_pos, float y_pos, int font_size, int r = 0, int g = 0, int b = 0, int a = 0);
int get_blank(string s);
void audio_callback(void* unused, Uint8* stream, int len);
void PlaySound(char* file);
void refreshRenderer();


/*
	updateCamera(); 
	Returns a new camera because the SDL_Render func refuses to work with 
	a pointer to a camera... smh.
	
	What a looser.
*/
SDL_Rect updateCamera(int player1X, int player1Y, int player2X, int player2Y, bool no_zoom);

enum
{
	GAME_STATE_GAME,
	GAME_STATE_MENU,
	GAME_STATE_CHARA_SELECT,
	GAME_STATE_CLOSE,
	GAME_STATE_DEBUG_MENU,

	GAME_STATE_MAX,
};

enum {
	PARAM_TYPE_INT = 1,
	PARAM_TYPE_FLOAT,
	PARAM_TYPE_STRING,
	PARAM_TYPE_BOOL,

	PARAM_TYPE_MAX,
};

enum
{
	BUTTON_UP,
	BUTTON_DOWN,
	BUTTON_LEFT,
	BUTTON_RIGHT,
	BUTTON_MENU_UP,
	BUTTON_MENU_DOWN,
	BUTTON_MENU_LEFT,
	BUTTON_MENU_RIGHT,
	BUTTON_LP,
	BUTTON_MP,
	BUTTON_HP,
	BUTTON_LK,
	BUTTON_MK,
	BUTTON_HK,
	BUTTON_MACRO_P,
	BUTTON_MACRO_K,
	BUTTON_START,
	BUTTON_MENU_SELECT,
	BUTTON_MENU_BACK,
	BUTTON_MENU_START,

	BUTTON_MAX,
};

enum
{
	BUTTON_DEBUG_ENABLE,
	BUTTON_DEBUG_ADVANCE,
	BUTTON_DEBUG_PICK_1,
	BUTTON_DEBUG_PICK_2,
	BUTTON_DEBUG_UP,
	BUTTON_DEBUG_DOWN,
	BUTTON_DEBUG_LEFT,
	BUTTON_DEBUG_RIGHT,
	BUTTON_DEBUG_CENTER_BOX,
	BUTTON_DEBUG_MOVE_0,
	BUTTON_DEBUG_MOVE_1,
	BUTTON_DEBUG_PRINT_POS,
	BUTTON_DEBUG_PRINT_FRAME,
	BUTTON_DEBUG_ZOOM_OUT,
	BUTTON_DEBUG_RESET,
	BUTTON_DEBUG_FULLSCREEN,

	BUTTON_DEBUG_MAX,
};

enum
{
	CHARA_KIND_ROY,
	CHARA_KIND_ERIC,
	CHARA_KIND_ATLAS,
	CHARA_KIND_CHARA_TEMPLATE,

	CHARA_KIND_MAX,
};

enum {
	PROJECTILE_KIND_ROY_FIREBALL,
	PROJECTILE_KIND_ERIC_FIREBALL,
	PROJECTILE_KIND_PROJECTILE_TEMPLATE,

	PROJECTILE_KIND_MAX,
};

enum {
	OBJECT_TYPE_FIGHTER,
	OBJECT_TYPE_PROJECTILE,

	OBJECT_TYPE_MAX,
};

enum {
	CHARA_STATUS_WAIT,
	CHARA_STATUS_WALKF,
	CHARA_STATUS_WALKB,
	CHARA_STATUS_DASH,
	CHARA_STATUS_DASHB,
	CHARA_STATUS_DASH_AIR,
	CHARA_STATUS_CROUCHD,
	CHARA_STATUS_CROUCH,
	CHARA_STATUS_CROUCHU,
	CHARA_STATUS_JUMPSQUAT,
	CHARA_STATUS_JUMP,
	CHARA_STATUS_FALL,
	CHARA_STATUS_ATTACK,
	CHARA_STATUS_ATTACK_AIR,
	CHARA_STATUS_GRAB,
	CHARA_STATUS_THROW,
	CHARA_STATUS_GRAB_AIR,
	CHARA_STATUS_THROW_AIR,
	CHARA_STATUS_GRABBED,
	CHARA_STATUS_THROWN,
	CHARA_STATUS_HITSTUN,
	CHARA_STATUS_HITSTUN_AIR,
	CHARA_STATUS_BLOCKSTUN,
	CHARA_STATUS_PARRY_START,
	CHARA_STATUS_PARRY,
	CHARA_STATUS_HITSTUN_PARRY,
	CHARA_STATUS_CRUMPLE,
	CHARA_STATUS_LAUNCH_START,
	CHARA_STATUS_LAUNCH,
	CHARA_STATUS_CLANK,
	CHARA_STATUS_THROW_TECH,
	CHARA_STATUS_LANDING,
	CHARA_STATUS_LANDING_ATTACK,
	CHARA_STATUS_LANDING_HITSTUN,
	CHARA_STATUS_KNOCKDOWN_START,
	CHARA_STATUS_KNOCKDOWN,
	CHARA_STATUS_WAKEUP,

	CHARA_STATUS_MAX,

	CHARA_ROY_STATUS_SPECIAL_FIREBALL_START = CHARA_STATUS_MAX,
	CHARA_ROY_STATUS_SPECIAL_FIREBALL_PUNCH,
	CHARA_ROY_STATUS_SPECIAL_FIREBALL_KICK,
	CHARA_ROY_STATUS_SPECIAL_UPPERCUT_START,
	CHARA_ROY_STATUS_SPECIAL_UPPERCUT,
	CHARA_ROY_STATUS_SPECIAL_UPPERCUT_FALL,
	CHARA_ROY_STATUS_MAX,

	CHARA_ERIC_STATUS_SPECIAL_FIREBALL = CHARA_STATUS_MAX,
	CHARA_ERIC_STATUS_SPECIAL_UPPERCUT_START,
	CHARA_ERIC_STATUS_SPECIAL_UPPERCUT,
	CHARA_ERIC_STATUS_SPECIAL_UPPERCUT_FALL,
	CHARA_ERIC_STATUS_MAX,

	CHARA_ATLAS_STATUS_SPECIAL_START = CHARA_STATUS_MAX,
	CHARA_ATLAS_STATUS_MAX,

	CHARA_CHARA_TEMPLATE_STATUS_TEMPLATE = CHARA_STATUS_MAX,
	CHARA_CHARA_TEMPLATE_STATUS_MAX,
}; 

enum {
	PROJECTILE_STATUS_DEFAULT,
	PROJECTILE_STATUS_MOVE,
	PROJECTILE_STATUS_HIT,
	PROJECTILE_STATUS_MAX,

	PROJECTILE_ROY_FIREBALL_STATUS_HOVER = PROJECTILE_STATUS_MAX,
	PROJECTILE_ROY_FIREBALL_STATUS_FALL,
	PROJECTILE_ROY_FIREBALL_STATUS_PUNCHED,
	PROJECTILE_ROY_FIREBALL_STATUS_KICKED,
	PROJECTILE_ROY_FIREBALL_STATUS_GROUND,
	PROJECTILE_ROY_FIREBALL_STATUS_MAX,

	PROJECTILE_ERIC_FIREBALL_STATUS_HOVER = PROJECTILE_STATUS_MAX,
	PROJECTILE_ERIC_FIREBALL_STATUS_KICKED,
	PROJECTILE_ERIC_FIREBALL_STATUS_MAX,

	PROJECTILE_PROJECTILE_TEMPLATE_STATUS_TEMPLATE = PROJECTILE_STATUS_MAX,
	PROJECTILE_PROJECTILE_TEMPLATE_STATUS_MAX,
};

enum
{
	CHARA_SITUATION_GROUND,
	CHARA_SITUATION_AIR,
	CHARA_SITUATION_DOWN,

	CHARA_SITUATION_MAX,
};

enum
{
	STATUS_GROUP_NORMAL,
	STATUS_GROUP_HITSTUN,
	STATUS_GROUP_CROUCH,

	STATUS_GROUP_MAX,
};

enum
{
	DASH_CANCEL_KIND_FOLLOWUP,
	DASH_CANCEL_KIND_INDEFINITE,

	DASH_CANCEL_KIND_MAX,
};

enum
{
	CHARA_JUMP_KIND_F,
	CHARA_JUMP_KIND_B,
	CHARA_JUMP_KIND_N,

	CHARA_JUMP_KIND_MAX,
};

enum
{
	PARRY_HEIGHT_HIGH,
	PARRY_HEIGHT_MID,
	PARRY_HEIGHT_LOW,
	PARRY_HEIGHT_ALL,

	PARRY_HEIGHT_MAX,
};

enum
{
	HITBOX_KIND_NORMAL,
	HITBOX_KIND_BLOCK,

	HITBOX_KIND_MAX,
};

enum
{
	ATTACK_LEVEL_LIGHT,
	ATTACK_LEVEL_MEDIUM,
	ATTACK_LEVEL_HEAVY,

	ATTACK_LEVEL_MAX,
};

enum
{
	CLANK_KIND_NORMAL,
	CLANK_KIND_CLANK,
	CLANK_KIND_CONTINUE,

	CLANK_KIND_MAX,
};

enum
{
	HIT_STATUS_NORMAL,
	HIT_STATUS_CRUMPLE,
	HIT_STATUS_LAUNCH,
	HIT_STATUS_KNOCKDOWN,

	HIT_STATUS_MAX,
};

enum
{
	COUNTERHIT_TYPE_NONE,
	COUNTERHIT_TYPE_AERIAL,
	COUNTERHIT_TYPE_NORMAL,

	COUNTERHIT_TYPE_MAX,
};

enum
{
	GRABBOX_KIND_NORMAL,
	GRABBOX_KIND_NOTECH,
	GRABBOX_KIND_HITSTUN,
	GRABBOX_KIND_HITSTUN_NOTECH,

	GRABBOX_KIND_MAX,
};

enum
{
	HURTBOX_KIND_NORMAL,
	HURTBOX_KIND_GRAB,
	HURTBOX_KIND_COUNTER,
	HURTBOX_KIND_JOSTLE,

	HURTBOX_KIND_MAX,
};

enum
{
	INTANGIBLE_KIND_HIGH,
	INTANGIBLE_KIND_MID,
	INTANGIBLE_KIND_LOW,
	INTANGIBLE_KIND_NONE,
	INTANGIBLE_KIND_THROW,
	INTANGIBLE_KIND_NORMAL,
	INTANGIBLE_KIND_PROJECTILE,
	INTANGIBLE_KIND_INVINCIBLE,
	INTANGIBLE_KIND_ALL,

	INTANGIBLE_KIND_MAX,
};

enum
{
	ATTACK_HEIGHT_HIGH,
	ATTACK_HEIGHT_MID,
	ATTACK_HEIGHT_LOW,

	ATTACK_HEIGHT_MAX,
};

enum
{
	ATTACK_KIND_LP,
	ATTACK_KIND_MP,
	ATTACK_KIND_HP,
	ATTACK_KIND_LK,
	ATTACK_KIND_MK,
	ATTACK_KIND_HK,
	ATTACK_KIND_CLP,
	ATTACK_KIND_CMP,
	ATTACK_KIND_CHP,
	ATTACK_KIND_CLK,
	ATTACK_KIND_CMK,
	ATTACK_KIND_CHK,

	ATTACK_KIND_MAX,
};

enum
{
	SITUATION_HIT_GROUND,
	SITUATION_HIT_AIR,
	SITUATION_HIT_DOWN,
	SITUATION_HIT_GROUND_AIR,
	SITUATION_HIT_ALL,

	SITUATION_HIT_MAX,
};

enum
{
	CHARA_INT_JUMP_KIND,
	CHARA_INT_DASH_F_WINDOW,
	CHARA_INT_DASH_B_WINDOW,
	CHARA_INT_KNOCKDOWN_TECH_WINDOW,
	CHARA_INT_DASH_AIR_DIR,
	CHARA_INT_BACK_CHARGE_FRAMES,
	CHARA_INT_BACK_CHARGE_TIMER,
	CHARA_INT_DOWN_CHARGE_FRAMES,
	CHARA_INT_DOWN_CHARGE_TIMER,
	CHARA_INT_PARRY_HEIGHT,
	CHARA_INT_INIT_HITLAG_FRAMES,
	CHARA_INT_HITLAG_FRAMES,
	CHARA_INT_HITSTUN_FRAMES,
	CHARA_INT_HITSTUN_LEVEL,
	CHARA_INT_BLOCKSTUN_HEIGHT,
	CHARA_INT_ATTACK_KIND,
	CHARA_INT_LANDING_LAG,
	CHARA_INT_JUGGLE_VALUE,
	CHARA_INT_DAMAGE_SCALE,
	CHARA_INT_WAKEUP_SPEED,
	CHARA_INT_236_STEP,
	CHARA_INT_236_TIMER,
	CHARA_INT_214_STEP,
	CHARA_INT_214_TIMER,
	CHARA_INT_623_STEP,
	CHARA_INT_623_TIMER,
	CHARA_INT_41236_STEP,
	CHARA_INT_41236_TIMER,
	CHARA_INT_63214_STEP,
	CHARA_INT_63214_TIMER,
	CHARA_INT_236236_STEP,
	CHARA_INT_236236_TIMER,
	CHARA_INT_214214_STEP,
	CHARA_INT_214214_TIMER,
	CHARA_INT_SPECIAL_LEVEL,
	CHARA_INT_MANUAL_POS_CHANGE_FRAMES,
	CHARA_INT_BUFFER_HITLAG_STATUS,
	CHARA_INT_COMBO_COUNT,
	CHARA_INT_FRAME_ADVANTAGE,

	CHARA_INT_MAX,
};

enum {
	SPECIAL_KIND_236,
	SPECIAL_KIND_214,
	SPECIAL_KIND_623,
	SPECIAL_KIND_41236,
	SPECIAL_KIND_63214,
	SPECIAL_KIND_236236,
	SPECIAL_KIND_214214,
	SPECIAL_KIND_CHARGE_DOWN,
	SPECIAL_KIND_CHARGE_BACK,

	SPECIAL_KIND_MAX,
};

enum {
	SPECIAL_LEVEL_L,
	SPECIAL_LEVEL_M,
	SPECIAL_LEVEL_H,
	SPECIAL_LEVEL_EX,

	SPECIAL_LEVEL_MAX,
};

enum {
	SPECIAL_INPUT_NONE,
	SPECIAL_INPUT_JUST,
	SPECIAL_INPUT_NORMAL,

	SPECIAL_INPUT_MAX,
};

enum {
	WAKEUP_SPEED_FAST,
	WAKEUP_SPEED_DEFAULT,
	WAKEUP_SPEED_SLOW,

	WAKEUP_SPEED_MAX,
};

enum {
	CHARA_FLOAT_HEALTH,
	CHARA_FLOAT_SUPER_METER,
	CHARA_FLOAT_INIT_POS_JUMP_Y,
	CHARA_FLOAT_CURRENT_X_SPEED,
	CHARA_FLOAT_CURRENT_Y_SPEED,
	CHARA_FLOAT_INIT_LAUNCH_SPEED,
	CHARA_FLOAT_LAUNCH_GRAVITY,
	CHARA_FLOAT_LAUNCH_FALL_SPEED_MAX,
	CHARA_FLOAT_LAUNCH_SPEED_X,
	CHARA_FLOAT_PUSHBACK_PER_FRAME,
	CHARA_FLOAT_MANUAL_POS_CHANGE_X,
	CHARA_FLOAT_MANUAL_POS_CHANGE_Y,
	CHARA_FLOAT_MANUAL_POS_OFFSET_X,
	CHARA_FLOAT_MANUAL_POS_OFFSET_Y,
	CHARA_FLOAT_DISTANCE_TO_WALL,

	CHARA_FLOAT_MAX,
};

enum
{
	CHARA_FLAG_SHORT_HOP,
	CHARA_FLAG_DASH_CANCEL,
	CHARA_FLAG_ATTACK_CONNECTED,
	CHARA_FLAG_ATTACK_CONNECTED_DURING_STATUS,
	CHARA_FLAG_ATTACK_BLOCKED_DURING_STATUS,
	CHARA_FLAG_HAS_ATTACK,
	CHARA_FLAG_HAD_ATTACK_IN_STATUS,
	CHARA_FLAG_SUCCESSFUL_PARRY,
	CHARA_FLAG_PARRY_ACTIVE,
	CHARA_FLAG_PROX_GUARD,
	CHARA_FLAG_ENTER_BLOCKSTUN,
	CHARA_FLAG_ENABLE_COUNTERHIT,
	CHARA_FLAG_USED_AIRDASH,
	CHARA_FLAG_THROW_TECH,
	CHARA_FLAG_PROJECTILE_CONNECTED_DURING_STATUS,
	CHARA_FLAG_ALLOW_GROUND_CROSSUP,
	CHARA_FLAG_CAN_TECH,
	CHARA_FLAG_FORCE_ANIM_CENTER,
	CHARA_FLAG_THREW_OPPONENT,
	CHARA_FLAG_STATIONARY_ANIMATION,
	CHARA_FLAG_BUFFER_HITLAG_STATUS_SEPARATE,
	CHARA_FLAG_BUFFER_HITLAG_STATUS_END,

	CHARA_FLAG_MAX,
};

enum
{
	CHARA_ROY_INT_FIREBALL_LEVEL,
	CHARA_ROY_INT_MAX,
};

enum
{
	CHARA_ROY_FLOAT_PLACEHOLDER,
	CHARA_ROY_FLOAT_MAX,
};

enum
{
	CHARA_ROY_FLAG_PLACEHOLDER,
	CHARA_ROY_FLAG_MAX,
};

enum
{
	CHARA_ERIC_INT_DISCHARGE_LEVEL,
	CHARA_ERIC_INT_MAX,
};

enum
{
	CHARA_ERIC_FLOAT_PLACEHOLDER,
	CHARA_ERIC_FLOAT_MAX,
};

enum
{
	CHARA_ERIC_FLAG_OVERDRIVEN,
	CHARA_ERIC_FLAG_MAX,
};

enum {
	CHARA_ATLAS_INT_START,
	CHARA_ATLAS_INT_MAX,
};

enum {
	CHARA_ATLAS_FLOAT_START,
	CHARA_ATLAS_FLOAT_MAX,
};

enum {
	CHARA_ATLAS_FLAG_START,
	CHARA_ATLAS_FLAG_MAX,
};

enum {
	CHARA_CHARA_TEMPLATE_INT_START,
	CHARA_CHARA_TEMPLATE_INT_MAX,
};

enum {
	CHARA_CHARA_TEMPLATE_FLOAT_START,
	CHARA_CHARA_TEMPLATE_FLOAT_MAX,
};

enum {
	CHARA_CHARA_TEMPLATE_FLAG_START,
	CHARA_CHARA_TEMPLATE_FLAG_MAX,
};

enum {
	PROJECTILE_INT_HEALTH,
	PROJECTILE_INT_ACTIVE_TIME,
	PROJECTILE_INT_HITLAG_FRAMES,
	PROJECTILE_INT_INIT_HITLAG_FRAMES,
	
	PROJECTILE_INT_MAX,
};

enum {
	PROJECTILE_FLOAT_SPEED_X,
	PROJECTILE_FLOAT_SPEED_Y,

	PROJECTILE_FLOAT_MAX,
};

enum {
	PROJECTILE_FLAG_HIT,
	PROJECTILE_FLAG_HIT_IN_STATUS,

	PROJECTILE_FLAG_MAX,
};

enum {
	MENU_LEVEL_TOP,
	MENU_LEVEL_SUB,

	MENU_LEVEL_MAX,
};

enum {
	SUB_MENU_ONLINE,
	SUB_MENU_SINGLEPLAYER,
	SUB_MENU_VS,
	SUB_MENU_OPTIONS,
	SUB_MENU_EXTRAS,

	SUB_MENU_MAX,
};

enum {
	SUB_ONLINE_LOBBY,

	SUB_ONLINE_MAX,
};

enum {
	SUB_SINGLEPLAYER_STORY,
	SUB_SINGLEPLAYER_ARCADE,
	SUB_SINGLEPLAYER_TRAINING,

	SUB_SINGLEPLAYER_MAX,
};

enum {
	SUB_VS_PVP,
	SUB_VS_PVC,
	SUB_VS_TOURNAMENT,

	SUB_VS_MAX,
};

enum {
	SUB_OPTIONS_CONTROLS,
	SUB_OPTIONS_MAX
};

enum {
	SUB_EXTRAS_SOUND_TEST,
	SUB_EXTRAS_GALLERY,

	SUB_EXTRAS_MAX,
};

struct Offset
{
	int offset_x;
	int offset_y;
};

struct Vec4f
{
	int x;
	int y;
	int z;
	int w;
};